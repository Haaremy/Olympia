generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output   = "../node_modules/.prisma/client"

}

datasource db {
  provider = "sqlite"
  url      =  env("DATABASE_URL")
}

model Game {
  id        Int        @id @default(autoincrement())
  url       String
  tagged    String?     
  languages Language[]  // Viele-Sprachen-Beziehung
  points    Points[]    // Umkehrbeziehung zu Points
  entries   Entries[]
}

model Language {
  id                Int    @id @default(autoincrement())
  game              Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId            Int
  language          String
  title             String
  story             String
  station           String  // Location-Feld hinzufügen
  capacity          String  // Capacity-Feld hinzufügen
  descriptionGame   String  // Beschreibung des Spiels hinzufügen
  descriptionPoints String  // Beschreibung der Punkte hinzufügen
}

model Team {
  id           Int       @id @default(autoincrement())
  uname  String    @unique
  password     String
  name         String
  user1        String
  user2        String
  user3        String?
  user4        String?
  role         Role       @default(USER)
  pointsTotal  Float
  points       Points[]  // Beziehung zu Points (umkehrbare Beziehung)
  entries   Entries[]
  language     String @default("de")
  cheatPoints Int
  chatMessages ChatMessage[]
}

model Reports {
  id Int @id @default(autoincrement())
  gameId  Int
  message String
  createdAt DateTime @default(now())
  teamName String
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  teamId    Int
  message   String
  createdAt DateTime @default(now())
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  edited    Boolean? @default(false)
}

enum Role{
  USER
  ADMIN
}

enum Slot {
  USER1
  USER2
  USER3
  USER4
}

model Points { // Auswertung der Einträge der Spieler
  id          Int       @id @default(autoincrement())
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      Int
  value       Int
  slot        Slot
  lastUpdated DateTime  @default(now())  // Store the timestamp of the last update (when points are submitted or updated)
}

model Entries { // einträge der Spieler
  id          Int       @id @default(autoincrement())
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      Int
  value       Int
  slot        Slot
  lastUpdated DateTime  @default(now())  // Store the timestamp of the last update (when points are submitted or updated)
}

model GameSettings {
  id      Int       @id @default(autoincrement())
  started Boolean   @default(false) // Whether the timer has started
  ending  DateTime // When the game ends
}
